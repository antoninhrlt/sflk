%YAML 1.2
---
name: SFLK
file_extensions: [sflk, Sflk, SFLK]
scope: source.sflk

contexts:

  main:
    - match: '#####'
      scope: punctuation.definition.comment.begin.sflk
      push: comment_5
    - match: '####'
      scope: punctuation.definition.comment.begin.sflk
      push: comment_4
    - match: '###'
      scope: punctuation.definition.comment.begin.sflk
      push: comment_3
    - match: '##'
      scope: punctuation.definition.comment.begin.sflk
      push: comment_2
    - match: '#'
      scope: punctuation.definition.comment.begin.sflk
      push: comment_1
    - match: '\('
      scope: punctuation.section.parens.begin.sflk
      push: paren
    - match: '\)'
      scope: invalid.illegal.sflk
    - match: '\{'
      scope: punctuation.section.braces.begin.sflk
      push: curly
    - match: '\}'
      scope: invalid.illegal.sflk
    - match: '"'
      scope: punctuation.definition.string.begin.sflk
      push: string_litteral
    - match: '[0-9]+'
      scope: constant.numeric.integer.decimal.sflk
    - match: '(<~|<)'
      scope: keyword.operator.assignment.flk
    - match: '\+|\-|\*|/'
      scope: keyword.operator.arithmetic.sflk
    - match: '(>)\s*([a-zA-Z]+)'
      captures:
        1: keyword.operator.sflk
        2: variable.function.sflk
    - match: '\b(do|dh)\b\s*([a-zA-Z]+)'
      captures:
        1: keyword.other.sflk
        2: variable.function.sflk
    - match: '>'
      scope: keyword.operator.sflk
    - match: '\b(if|th|el)\b'
      scope: keyword.control.conditional.if.sflk
    - match: '\b(lp|wh|bd|sp)\b'
      scope: keyword.control.loop.sflk
    - match: '\b(fh)\b'
      scope: keyword.import.sflk
    - match: '\b(np|pr|nl|do|dh|ev|redo|end|imp|exp)\b'
      scope: keyword.other.sflk
    - match: '\b(v)\b'
      scope: variable.parameter.sflk
    - match: '[a-zA-Z]+'
      scope: variable.sflk

  comment_1:
    - meta_scope: comment.block.sflk
    - match: '##'
    - match: '#'
      scope: punctuation.definition.comment.end.sflk
      pop: true

  comment_2:
    - meta_scope: comment.block.sflk
    - match: '###'
    - match: '##'
      scope: punctuation.definition.comment.end.sflk
      pop: true

  comment_3:
    - meta_scope: comment.block.sflk
    - match: '####'
    - match: '###'
      scope: punctuation.definition.comment.end.sflk
      pop: true

  comment_4:
    - meta_scope: comment.block.sflk
    - match: '#####'
    - match: '####'
      scope: punctuation.definition.comment.end.sflk
      pop: true

  comment_5:
    - meta_scope: comment.block.sflk
    - match: '######'
    - match: '#####'
      scope: punctuation.definition.comment.end.sflk
      pop: true

  paren:
    - match: '\)'
      scope: punctuation.section.parens.end.sflk
      pop: true
    - include: main

  curly:
    - match: '\}'
      scope: punctuation.section.braces.end.sflk
      pop: true
    - include: main

  string_litteral:
    - meta_scope: string.quoted.double.sflk
    - match: '\\$'
      scope: source.sflk
    - match: '\\x\([0-9a-fA-F]*\)'
      scope: constant.character.escape.sflk
    - match: '\\d\([0-9]*\)'
      scope: constant.character.escape.sflk
    - match: '\\(\\|\"|\?|n|t|e|a|b|v|f|r|(x[0-9a-fA-F]{2})|(d[0-9]{2}))'
      scope: constant.character.escape.sflk
    - match: '"'
      scope: punctuation.definition.string.end.sflk
      pop: true
