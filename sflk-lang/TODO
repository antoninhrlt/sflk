
README
- rewrite the README.md with more examples, more shit and less formal documentation
- maybe move the documentation elsewhere

COMMENTS
- comments should be handled perfectly by the parser, none should be discarded

CHAINS AND CHOPS REVISIONS
- chains should be seen as group statements
- chops should be seen as chop statements
- this is not different from the old way of seeing things,
	juts easier to name things since it will ne longer be necessary to handle
	the chain case that really looks like a group statement

INDENTED LOG
- should be able to be "live", ie to be printed while being generated
	so that s statement like, say, input, does workout correctly

STRING TREE STYLES REVISION
- string tree may have named nodes that are printed like that:
		program
		├─if
		│ │condition
		│ ├─invalid
		│ │then branch
		│ ├─no then branch
		│ │else branch
		│ └─invalid
		└─invalid
	or
		program
		├─if
		│ │┌condition
		│ ├┴─invalid
		│ │┌then branch
		│ ├┴─no then branch
		│ │┌else branch
		│ └┴─invalid
		└─invalid
	or ohter styles,
	actually it should be very customisable,
	with the named node style being choosble from a list of styles
	and with empty nodes being able to be disabled
	and named nodes being able to be disabled
- some boolean options should say if we want to see loc and comments

AST REVISION
- attach a warning list to nodes
- nodes may have erroneous variants *describing the error*

PROGRAM REVISION
- statements, expressions, chops and literals may be erroneous
- errors should carry information about the nature of the errors

DEBUG REVISION
- see the tokens
- see the indented log of token reading and AST building

REFACTOR THE CALL STACK
- the call stack is an exec tree (see ADD SIGNALS)
- each node has an instruction pointer and a code block
- groups of nodes share contexts NO!!!
- some nodes have a context NO!!!
- actually
	- there are no contexts
	- when reading a variable, if the variable is not defined, then
		a reading signal traves down the exec tree until
			it finds the variable or it encounters a read-blocker
	- a read-blocker is something (not well defined for now) that says to
		the reading signal "hey don't try reading beyond this point"
	- a do here statement will not set up a read-blocker
		but a do statement will
	- read-blockers should actually be more subtle than that, and may check
		the reading signal to see if it wants to read a white-listed variable
		or something (that could emulate global variables, but in a way that
		can be controlled with a lot more precision than usual global
		variables hehe ^^)

ADD SIGNALS
- a signal has a type that defines the signal behavior and the payload type
- a signal type can go either up or down
- a signal going down can either
	draw a path or
	destroy every node of the call tree on its way
- a signal going up must follow a path and consume it
- a signal takes the instruction pointer with it
- there are some built-in signal types
	- print object, print newline, 
	- warning, error, halt
	- input
	- read variable (maybe?), write variable (maybe?)
	- and every "going up" variants
	- etc.
- the call stack is actually an execution tree, with the root at the bottom
- a node of the execution tree is an execution context
- signals travel along this tree
- if a node wants to, it may catch some types of signals passing through it
	- such catching is actually executing a code block with v as the signal
	- such an execution may result in a new temporary subtree (on the right)
	- it may result in anything, including
		letting the original signal go where it was originally going, or
		sending an other signal, or
		not sending a signal, or
		destroying subtrees of the execution tree, or
		anything else, including a combination of the above examples, but
		in any case, the preperties below are to be respected
			this is enforced by the interpreter no matter what
	- it may itself send unrelated signals
		it will pop new new temporary subtrees (on the right)
- due to all this, some properties of the execution tree can be deduced
	- for a non-right-most node to exist, a path must lead to or go through it
	- maybe others properties i haven't found yet
- every interaction with outside of the interpreter is done at the root
	- I/O, file manipulation, physical device, network, OS, etc.
	- using signals is the only way for a program to perform such actions
		a print statement sends a print signal carrying the object to print
		the signal goes downward eventually reaching the root (if not caught)
		then the root performs the printing and sends an other signal
		following the path left by the prnting signal
		up to the execution context that emitted the print signal
		and the execution continues as if the print statement just printed
	- this ensures that every SFLK program is completely sandboxable
		- a node of the execution tree may imitate the behavior of the root
			from the point of view of its subtrees

ADD GLOBALS
- define how it must work

ADD GROUP STATEMENTS
- a group of statements between ( ) are treated as a single statement
- ( ... ) is kind of equivalent to dh{ ... } but only kind of
- putting a single statement between ( ) can be useful (nested ifs, lps, etc.)

ADD STATEMENTS AND EXPRESSIONS AND TYPES
- lp wh 1 ao bd dh {} sp dh {}
	- add statement extensions to allow having the iteration number
	- add statement extensions to iter over collections
- ev ,,, ,8 ,4 ,2
- if tr th pr "true" if fa el pr "false"
- ... # pr "(Doing stuff at line n...)" nl #
- x < in pr "Enter x plz > "

ADD A REPL
- add a repl

#########################################################
VAGUE IDEAS
- display runtime errors nicely (embbed optionnal statement loc ?)
- be able to display warning
- modular parser ?
- lib build target for integration in the language server
- debug expression using $ like this:
	x < y + $(z - a / $b) # dbg b, then dbg (z - a / $b) #
	(or not ?)
- breakpoints that open a debug repl
- debug repl commands can be used in the code with prefix $$
- read and write to variables of other contexts with more precision
- bock *call* syntax (or not ?)
- @ is now the current cx (or not ?)
- types, conversions
- lazy expressions
- make runtime objects embed their trace
